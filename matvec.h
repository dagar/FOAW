
#ifndef __MAT_VEC_H__
#define __MAT_VEC_H__

#include "gle_vvector.h"

/* Supplement gle_vvector.h with some more matrix/vector routines we
 * need to implement the Kalman filter. */

#define MATRIX_PRODUCT_3X3_3X2T(c,a,b)                              \
{                                                                   \
    c[0][0] = a[0][0]*b[0][0]+a[0][1]*b[0][1]+a[0][2]*b[0][2];      \
    c[0][1] = a[0][0]*b[1][0]+a[0][1]*b[1][1]+a[0][2]*b[1][2];      \
                                                                    \
    c[1][0] = a[1][0]*b[0][0]+a[1][1]*b[0][1]+a[1][2]*b[0][2];      \
    c[1][1] = a[1][0]*b[1][0]+a[1][1]*b[1][1]+a[1][2]*b[1][2];      \
                                                                    \
    c[2][0] = a[2][0]*b[0][0]+a[2][1]*b[0][1]+a[2][2]*b[0][2];      \
    c[2][1] = a[2][0]*b[1][0]+a[2][1]*b[1][1]+a[2][2]*b[1][2];      \
}

#define MATRIX_PRODUCT_2X3_2X2(c,a,b)           \
{                                               \
    c[0][0] = a[0][0]*b[0][0]+a[0][1]*b[0][1];  \
    c[0][1] = a[0][0]*b[1][0]+a[0][1]*b[1][1];  \
                                                \
    c[1][0] = a[1][0]*b[0][0]+a[1][1]*b[0][1];  \
    c[1][1] = a[1][0]*b[1][0]+a[1][1]*b[1][1];  \
                                                \
    c[2][0] = a[2][0]*b[0][0]+a[2][1]*b[0][1];  \
    c[2][1] = a[2][0]*b[1][0]+a[2][1]*b[1][1];  \
}

#define MATRIX_PRODUCT_3X3_3X3T(c,a,b)                          \
{                                                               \
    c[0][0] = a[0][0]*b[0][0]+a[0][1]*b[0][1]+a[0][2]*b[0][2];  \
    c[0][1] = a[0][0]*b[1][0]+a[0][1]*b[1][1]+a[0][2]*b[1][2];  \
    c[0][2] = a[0][0]*b[2][0]+a[0][1]*b[2][1]+a[0][2]*b[2][2];  \
                                                                \
    c[1][0] = a[1][0]*b[0][0]+a[1][1]*b[0][1]+a[1][2]*b[0][2];  \
    c[1][1] = a[1][0]*b[1][0]+a[1][1]*b[1][1]+a[1][2]*b[1][2];  \
    c[1][2] = a[1][0]*b[2][0]+a[1][1]*b[2][1]+a[1][2]*b[2][2];  \
                                                                \
    c[2][0] = a[2][0]*b[0][0]+a[2][1]*b[0][1]+a[2][2]*b[0][2];  \
    c[2][1] = a[2][0]*b[1][0]+a[2][1]*b[1][1]+a[2][2]*b[1][2];  \
    c[2][2] = a[2][0]*b[2][0]+a[2][1]*b[2][1]+a[2][2]*b[2][2];  \
}

#define MATRIX_PRODUCT_3X2_2X3(c,a,b)                           \
{                                                               \
    c[0][0] = a[0][0]*b[0][0]+a[0][1]*b[1][0]+a[0][2]*b[2][0];  \
    c[0][1] = a[0][0]*b[0][1]+a[0][1]*b[1][1]+a[0][2]*b[2][1];  \
                                                                \
    c[1][0] = a[1][0]*b[0][0]+a[1][1]*b[1][0]+a[1][2]*b[2][0];  \
    c[1][1] = a[1][0]*b[0][1]+a[1][1]*b[1][1]+a[1][2]*b[2][1];  \
}

#define MATRIX_PRODUCT_2X3_3X2(c,a,b)           \
{                                               \
    c[0][0] = a[0][0]*b[0][0]+a[0][1]*b[1][0];  \
    c[0][1] = a[0][0]*b[0][1]+a[0][1]*b[1][1];  \
    c[0][2] = a[0][0]*b[0][2]+a[0][1]*b[1][2];  \
                                                \
    c[1][0] = a[1][0]*b[0][0]+a[1][1]*b[1][0];  \
    c[1][1] = a[1][0]*b[0][1]+a[1][1]*b[1][1];  \
    c[1][2] = a[1][0]*b[0][2]+a[1][1]*b[1][2];  \
                                                \
    c[2][0] = a[2][0]*b[0][0]+a[2][1]*b[1][0];  \
    c[2][1] = a[2][0]*b[0][1]+a[2][1]*b[1][1];  \
    c[2][2] = a[2][0]*b[0][2]+a[2][1]*b[1][2];  \
}

// A few needed matrix functions
#define MATRIX_ADD_3X3(c,a,b)                   \
{                                               \
    c[0][0] = a[0][0] + b[0][0];                \
    c[1][0] = a[1][0] + b[1][0];                \
    c[2][0] = a[2][0] + b[2][0];                \
    c[0][1] = a[0][1] + b[0][1];                \
    c[1][1] = a[1][1] + b[1][1];                \
    c[2][1] = a[2][1] + b[2][1];                \
    c[0][2] = a[0][2] + b[0][2];                \
    c[1][2] = a[1][2] + b[1][2];                \
    c[2][2] = a[2][2] + b[2][2];                \
}

#define MATRIX_SUB_3X3(c,a,b)                   \
{                                               \
    c[0][0] = a[0][0] - b[0][0];                \
    c[1][0] = a[1][0] - b[1][0];                \
    c[2][0] = a[2][0] - b[2][0];                \
    c[0][1] = a[0][1] - b[0][1];                \
    c[1][1] = a[1][1] - b[1][1];                \
    c[2][1] = a[2][1] - b[2][1];                \
    c[0][2] = a[0][2] - b[0][2];                \
    c[1][2] = a[1][2] - b[1][2];                \
    c[2][2] = a[2][2] - b[2][2];                \
}

#define MATRIX_ADD_2X2(c,a,b)                   \
{                                               \
    c[0][0] = a[0][0] + b[0][0];                \
    c[1][0] = a[1][0] + b[1][0];                \
    c[0][1] = a[0][1] + b[0][1];                \
    c[1][1] = a[1][1] + b[1][1];                \
}

#define MATRIX_SUB_2X2(c,a,b)                   \
{                                               \
    c[0][0] = a[0][0] - b[0][0];                \
    c[1][0] = a[1][0] - b[1][0];                \
    c[0][1] = a[0][1] - b[0][1];                \
    c[1][1] = a[1][1] - b[1][1];                \
}

#define MAT_DOT_VEC_3X2(p,m,v)                              \
{                                                           \
    p[0] = m[0][0]*v[0] + m[0][1]*v[1] + m[0][2]*v[2];      \
    p[1] = m[1][0]*v[0] + m[1][1]*v[1] + m[1][2]*v[2];      \
}

#define MAT_DOT_VEC_2X3_FULL(p,m,v)          \
{                                            \
    p[0] = m[0][0]*v[0] + m[0][1]*v[1];      \
    p[1] = m[1][0]*v[0] + m[1][1]*v[1];      \
    p[2] = m[2][0]*v[0] + m[2][1]*v[1];      \
}

/* Solve for X without inverting A */
#define MAT_SOLVE_AX_EQ_B_2X3_2X2(x,b,a)                 \
{                                                        \
    x[0][0] =  - (a[1][1]*b[0][0] - a[1][0]*b[0][1])     \
               / (a[0][1]*a[1][0] - a[0][0]*a[1][1]);    \
    x[0][1] =    (a[0][1]*b[0][0] - a[0][0]*b[0][1])     \
               / (a[0][1]*a[1][0] - a[0][0]*a[1][1]);    \
    x[1][0] =    (a[1][0]*b[1][1] - a[1][1]*b[1][0])     \
               / (a[0][1]*a[1][0] - a[0][0]*a[1][1]);    \
    x[1][1] =  - (a[0][0]*b[1][1] - a[0][1]*b[1][0])     \
               / (a[0][1]*a[1][0] - a[0][0]*a[1][1]);    \
    x[2][0] =    (a[1][0]*b[2][1] - a[1][1]*b[2][0])     \
               / (a[0][1]*a[1][0] - a[0][0]*a[1][1]);    \
    x[2][1] =  - (a[0][0]*b[2][1] - a[0][1]*b[2][0])     \
               / (a[0][1]*a[1][0] - a[0][0]*a[1][1]);    \
}

#define IDENTIFY_MATRIX_2X2(m)              \
{                                           \
    m[0][0] = 1.0;                          \
    m[0][1] = 0.0;                          \
                                            \
    m[1][0] = 0.0;                          \
    m[1][1] = 1.0;                          \
}

#define MATRIX_PRODUCT_2X2_2X2T(c,a,b)                          \
{                                                               \
    c[0][0] = a[0][0]*b[0][0]+a[0][1]*b[0][1];                  \
    c[0][1] = a[0][0]*b[1][0]+a[0][1]*b[1][1];                  \
                                                                \
    c[1][0] = a[1][0]*b[0][0]+a[1][1]*b[0][1];                  \
    c[1][1] = a[1][0]*b[1][0]+a[1][1]*b[1][1];                  \
}

#define MATRIX_PRODUCT_2X1_1X2(c,a,b)                           \
{                                                               \
    c[0][0] = a[0]*b[0];                                        \
    c[0][1] = a[0]*b[1];                                        \
                                                                \
    c[1][0] = a[1]*b[0];                                        \
    c[1][1] = a[1]*b[1];                                        \
}

#define DOT_VEC_1X2_2X1(p,m,v)                          \
{                                                       \
    p = m[0]*v[0] + m[1]*v[1];                          \
}

#define MATRIX_PRODUCT_2X2_2X1T(p,m,v)          \
{                                               \
    p[0] = m[0][0]*v[0] + m[0][1]*v[1];         \
    p[1] = m[1][0]*v[0] + m[1][1]*v[1];         \
}

#define MAT_SOLVE_AX_EQ_B_1X2_1X1(x,b,a)             \
{                                                    \
    x[0] = b[0] / a;                                 \
    x[1] = b[1] / a;                                 \
}
#endif
